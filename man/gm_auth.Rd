% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gm_auth.R
\name{gm_auth}
\alias{gm_auth}
\title{Authorize gmailr}
\usage{
gm_auth(
  email = gm_default_email(),
  path = NULL,
  scopes = "full",
  cache = gargle::gargle_oauth_cache(),
  use_oob = gargle::gargle_oob_default(),
  token = NULL
)
}
\arguments{
\item{email}{Optional. If specified, \code{email} can take several different
forms:
\itemize{
\item \code{"jane@gmail.com"}, i.e. an actual email address. This allows the user to
target a specific Google identity. If specified, this is used for token
lookup, i.e. to determine if a suitable token is already available in the
cache. If no such token is found, \code{email} is used to pre-select the targeted
Google identity in the OAuth chooser. (Note, however, that the email
associated with a token when it's cached is always determined from the token
itself, never from this argument).
\item \code{"*@example.com"}, i.e. a domain-only glob pattern. This can be helpful if
you need code that "just works" for both \code{alice@example.com} and
\code{bob@example.com}.
\item \code{TRUE} means that you are approving email auto-discovery. If exactly one
matching token is found in the cache, it will be used.
\item \code{FALSE} or \code{NA} mean that you want to ignore the token cache and force a
new OAuth dance in the browser.
}

Defaults to the option named \code{"gargle_oauth_email"}, retrieved by
\code{\link[gargle:gargle_oauth_email]{gargle_oauth_email()}} (unless a wrapper package implements different
default behavior).}

\item{path}{JSON identifying the service account, in one of the forms
supported for the \code{txt} argument of \code{\link[jsonlite:fromJSON]{jsonlite::fromJSON()}} (typically, a
file path or JSON string).}

\item{scopes}{One or more API scopes. Each scope can be specified in full or,
for Gmail API-specific scopes, in an abbreviated form that is recognized by
\code{\link[=gm_scopes]{gm_scopes()}}:
\itemize{
\item "full" = "https://mail.google.com/" (the default)
\item "gmail.compose" = "https://www.googleapis.com/auth/gmail.compose"
\item "gmail.readonly" = "https://www.googleapis.com/auth/gmail.readonly"
\item "gmail.labels" = "https://www.googleapis.com/auth/gmail.labels"
\item "gmail.send" = "https://www.googleapis.com/auth/gmail.send"
\item "gmail.insert" = "https://www.googleapis.com/auth/gmail.insert"
\item "gmail.modify" = "https://www.googleapis.com/auth/gmail.modify"
\item "gmail.metadata" = "https://www.googleapis.com/auth/gmail.metadata"
\item "gmail.settings_basic" = "https://www.googleapis.com/auth/gmail.settings.basic"
\item "gmail.settings_sharing" = "https://www.googleapis.com/auth/gmail.settings.sharing"
}

See \url{https://developers.google.com/gmail/api/auth/scopes} for details on the
permissions for each scope.}

\item{cache}{Specifies the OAuth token cache. Defaults to the option named
\code{"gargle_oauth_cache"}, retrieved via \code{\link[gargle:gargle_oauth_cache]{gargle_oauth_cache()}}.}

\item{use_oob}{Whether to use out-of-band authentication (or, perhaps, a
variant implemented by gargle and known as "pseudo-oob") when first
acquiring the token. Defaults to the value returned by
\code{\link[gargle:gargle_oob_default]{gargle_oob_default()}}. Note that (pseudo-)oob auth only affects
the initial OAuth dance. If we retrieve (and possibly refresh) a
cached token, \code{use_oob} has no effect.}

\item{token}{A token with class \link[httr:Token-class]{Token2.0} or an object of
httr's class \code{request}, i.e. a token that has been prepared with
\code{\link[httr:config]{httr::config()}} and has a \link[httr:Token-class]{Token2.0} in the
\code{auth_token} component.}
}
\description{
Authorize gmailr to view and manage your Gmail projects. This function is a
wrapper around \code{\link[gargle:token_fetch]{gargle::token_fetch()}}.

By default, you are directed to a web browser, asked to sign in to your
Google account, and to grant gmailr permission to operate on your
behalf with Google Gmail. By default, with your permission, these user
credentials are cached in a folder below your home directory, from where
they can be automatically refreshed, as necessary. Storage at the user
level means the same token can be used across multiple projects and
tokens are less likely to be synced to the cloud by accident.

If you are interacting with R within a browser (applies to RStudio
Server, Posit Workbench, Posit Cloud, and Google Colaboratory), you need
a variant of this flow, known as out-of-band auth ("oob") or
pseudo-oob. If this does not happen automatically, you can request it
explicitly with \code{use_oob = TRUE} or, more persistently, by setting an
option via \code{options(gargle_oob_default = TRUE)}.
}
\details{
Most users, most of the time, do not need to call \code{gm_auth()}
explicitly -- it is triggered by the first action that requires
authorization. Even when called, the default arguments often suffice.
However, when necessary, this function allows the user to explicitly:
\itemize{
\item Declare which Google identity to use, via an email address. If there
are multiple cached tokens, this can clarify which one to use. It can
also force gmailr to switch from one identity to another. If
there's no cached token for the email, this triggers a return to the
browser to choose the identity and give consent. You can specify just
the domain by using a glob pattern. This means that a script
containing \code{email = "*@example.com"} can be run without further
tweaks on the machine of either \code{alice@example.com} or
\code{bob@example.com}.
\item Use a service account token or workload identity federation.
\item Bring their own \link[httr:Token-class]{Token2.0}.
\item Specify non-default behavior re: token caching and out-of-bound
authentication.
\item Customize scopes.
}

For details on the many ways to find a token, see
\code{\link[gargle:token_fetch]{gargle::token_fetch()}}. For deeper control over auth, use
\code{\link[=gm_auth_configure]{gm_auth_configure()}} to bring your own OAuth client or API key.
Read more about gargle options, see \link[gargle:gargle_options]{gargle::gargle_options}.
}
\examples{
\dontshow{if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# load/refresh existing credentials, if available
# otherwise, go to browser for authentication and authorization
gm_auth()

# indicate the specific identity you want to auth as
gm_auth(email = "jim@example.com")

# force a new browser dance, i.e. don't even try to use existing user
# credentials
gm_auth(email = NA)

# use a 'read only' scope, so it's impossible to, e.g., send or delete email
gm_auth(scopes = "gmail.readonly")
\dontshow{\}) # examplesIf}
}
\seealso{
Other auth functions: 
\code{\link{gm_auth_configure}()},
\code{\link{gm_deauth}()},
\code{\link{gm_scopes}()},
\code{\link{gmailr_configuration}}
}
\concept{auth functions}
